// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  ladders       Ladder[]
  players       Player[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Player {
  id       Int      @id @default(autoincrement())
  name     String?
  ladders   Ladder[] 
  matches  Match[]
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  records  Record[]
  playerWins Match[]  @relation(name: "playerWins")
  playerLosses Match[]  @relation(name: "playerLosses")
}

model Record {
  id       Int     @id @default(autoincrement())
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
  matches  Match[]
  wins     Match[]  @relation(name: "Wins") 
  losses   Match[]  @relation(name: "Losses")
  ladder   Ladder  @relation(fields: [ladderId], references: [id], onDelete: Cascade)
  ladderId Int
  playerName String @default("")
}

model Ladder {
  id      Int      @id @default(autoincrement())
  name    String
  players Player[]
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  matches Match[]
  records Record[]

}

model Match {
  id       Int      @id @default(autoincrement())
  players  Player[]
  ladder   Ladder   @relation(fields: [ladderId], references: [id], onDelete: Cascade)
  ladderId Int
  draw     Boolean  @default(false)
  winner   Record   @relation(name: "Wins", fields: [winnerId], references: [id], onDelete: Cascade)
  winnerId Int
  loser    Record   @relation(name: "Losses", fields: [loserId], references: [id], onDelete: Cascade)
  loserId  Int
  records  Record[]
  winningPlayer Player @relation(name: "playerWins", fields: [winningPlayerId], references: [id], onDelete: Cascade)
  winningPlayerId Int
  losingPlayer Player @relation(name: "playerLosses", fields: [losingPlayerId], references: [id], onDelete: Cascade)
  losingPlayerId Int
}

