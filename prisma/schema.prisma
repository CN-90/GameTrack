// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // groups        Group[]        @relation("GroupMembers")
  // invitations   Invitation[]
  // matches       Match[]
  sessions      Session[]
  accounts      Account[]
  // admin         Admin[]
  // notifications Notification[]
  ladders       Ladder[]
  // gameRecords   Player[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// model Group {
//   id          Int          @id @default(autoincrement())
//   name        String       @unique
//   description String?
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   members     User[]       @relation("GroupMembers")
//   admin       Admin[]
//   private     Boolean      @default(true)
//   invitations Invitation[]
//   matches     Match[]
//   tables      Table[]
// }

// model Admin {
//   id          Int          @id @default(autoincrement())
//   user        User         @relation(fields: [userId], references: [id])
//   group       Group?       @relation(fields: [groupId], references: [id])
//   invitations Invitation[]
//   groupId     Int?
//   userId      Int
// }

// model Invitation {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   group     Group    @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   sentTo    User     @relation(fields: [sentToId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   viewed    Boolean  @default(false)
//   accepted  Boolean  @default(false)
//   groupId   Int
//   sentToId  Int
//   Admin     Admin?   @relation(fields: [adminId], references: [id])
//   adminId   Int?
// }

// model Game {
//   id      Int      @id @default(autoincrement())
//   title   String   @unique
//   tables  Table[]
//   players Player[]
// }

model Player {
  id       Int     @id @default(autoincrement())
  // user    User?    @relation(fields: [userId], references: [id])
  // userId  Int
  name     String?
  // game    Game    @relation(fields: [gameId], references: [id])
  wins     Int     @default(0)
  loses    Int     @default(0)
  draws    Int     @default(0)
  // gameId  Int
  matches  Match[]
  ladder   Ladder  @relation(fields: [ladderId], references: [id])
  ladderId Int
}

// model Notification {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   message   String
//   viewed    Boolean  @default(false)
// }

model Ladder {
  id      Int      @id @default(autoincrement())
  name    String
  // matches Match[]
  // game    Game?    @relation(fields: [gameId], references: [id])
  // gameId  Int?
  // group   Group?   @relation(fields: [groupId], references: [id])
  // groupId Int?
  // users   User[]
  players Player[]
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
}

model Match {
  id       Int     @id @default(autoincrement())
  // ladder    Ladder   @relation(fields: [ladderId], references: [id])
  // ladderId  Int
  // users    User[]
  // Group    Group?  @relation(fields: [groupId], references: [id])
  // groupId  Int?
  players  Player? @relation(fields: [playerId], references: [id])
  playerId Int?
}
